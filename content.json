{"meta":{"title":"Kyle's Blog","subtitle":"","description":"","author":"Kyle Yang","url":"https://github.com/kyrie96521/kyrie96521.github.io","root":"/"},"pages":[{"title":"about","date":"2020-03-03T08:30:00.000Z","updated":"2020-03-06T13:32:15.940Z","comments":true,"path":"about/index.html","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/about/index.html","excerpt":"","text":"Record the leaning process of Kyle"},{"title":"Tags","date":"2020-03-03T04:17:46.000Z","updated":"2020-03-04T00:44:53.835Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"css flex box","slug":"3.4","date":"2020-03-03T14:23:48.000Z","updated":"2020-03-04T14:19:27.540Z","comments":true,"path":"2020/03/04/3.4/","link":"","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/2020/03/04/3.4/","excerpt":"","text":"css flex box在 flex 布局中，flex 项（就是子元素）要么按照 main axis(主轴)（从 main-start 到 main-end ）排布，要么按照 cross axis(交叉轴) (从 cross-start 到 cross-end)排布。了解六个容器属性等。 两个极好的教程:https://www.html.cn/archives/8629https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html","categories":[],"tags":[{"name":"Daily juice","slug":"Daily-juice","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/Daily-juice/"},{"name":"css flex box","slug":"css-flex-box","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/css-flex-box/"}]},{"title":"css box model and positioning","slug":"3.3","date":"2020-03-03T01:57:48.000Z","updated":"2020-03-04T14:19:26.391Z","comments":true,"path":"2020/03/03/3.3/","link":"","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/2020/03/03/3.3/","excerpt":"","text":"css box model1.所有元素在 css 里都会是一个 box； margin 是该 box 与其他 box 的距离，而 padding 是该盒子边界与内容区的距离 2.当两个 box 相邻时，margin 会塌陷（重叠），选 box margin 大的那一个作为距离 3.box-sizing 属性：border-box，内容区宽度或高度会自动调整padding + border + 内容 width= 盒子的宽度padding+ border + 内容 height = 盒子的高度 css positioning1.postion： 默认是 static relative 允许对元素的位置进行操作 2.absolute：相对于上级元素（一般是父元素）进行偏移，即定位基点是父元素。条件是定位基点（一般是父元素）不能是 static 定位， 否则定位基点是 html。 3.fixed：相对于视口（viewport，浏览器窗口）进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。 4.sticky：一些时候是 relative 定位（定位基点是自身默认位置），另一些时候自动变成 fixed 定位（定位基点是视口） 摘自：阮一峰教程","categories":[],"tags":[{"name":"Daily juice","slug":"Daily-juice","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/Daily-juice/"},{"name":"css box model","slug":"css-box-model","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/css-box-model/"},{"name":"css positioning","slug":"css-positioning","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/css-positioning/"}]},{"title":"Redux middleware","slug":"3.2","date":"2020-03-02T07:57:48.000Z","updated":"2020-03-04T14:40:31.194Z","comments":true,"path":"2020/03/02/3.2/","link":"","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/2020/03/02/3.2/","excerpt":"","text":"redux 中间件1.为什么要有中间件：目的是去处理一些在 redux 里的异步问题 store.dispath(action)是瞬时的，如果需要在 redux 里处理异步问题，则需要中间件来处理。 2.什么是中间件？（From Dan Abramov）It provides a third-party extension point between dispatching an action, and the moment it reaches the reducer. 3.实现一个异步功能的计数器？如果在 view 里有一个 button 的 onClick 事件，用户每次点击 button，则会触发 addOne action creator 并且可以 dispatch action；thunk 中间件允许我们 dispatch 出异步 function，它相比 reducers 是不纯净的；然后经过 thunk 中间件，再传递给 reducer 对 action 进行处理，生成全新的 state； 4.其与小点applyMiddlewares 作用是将所有中间件组成一个数组，依次执行，要注意中间件的次序；view 和 state 是一一对应的，当 state 变化，view 会被重新渲染；store.dispatch 方法会触发 Reducer 的自动执行；一个 action 可能经过不同的中间件，当 action 不需要再被处理时，中间件会进行自己的“熔断”机制；","categories":[],"tags":[{"name":"Daily juice","slug":"Daily-juice","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/Daily-juice/"},{"name":"redux middleware","slug":"redux-middleware","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/redux-middleware/"}]},{"title":"事件捕获及冒泡","slug":"3.1","date":"2020-03-01T10:47:28.000Z","updated":"2020-03-04T13:53:43.210Z","comments":true,"path":"2020/03/01/3.1/","link":"","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/2020/03/01/3.1/","excerpt":"","text":"DOM 操作&amp;jQuery1.在 jQuery 里必须是对 jQuery 对象进行操作，所以对象需要被包裹在$(obj)里,比如$(this.obj) 2.事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。事件会从最内层的元素开始发生，一直向上传播，直到 document 对象。即 child 事件先处理。但事件捕获(event capturing)与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。element.addEventListener(event, function, useCapture)true - 事件在捕获阶段执行false- 默认。事件在冒泡阶段执行 3.我们给一个 dom 同时绑定两个点击事件，一个用捕获，一个用冒泡，会执行几次事件，会先执行冒泡还是捕获？非目标元素捕获 -&gt; 目标元素代码顺序 -&gt; 非目标元素冒泡https://blog.csdn.net/moguzhale/article/details/53503044 4.阻止冒泡和取消默认事件event.stopPropagation()起到阻止捕获和冒泡阶段中当前事件的进一步传播。使用 event.preventDefault()可以取消默认事件https://www.jianshu.com/p/1fd066b4c0ba","categories":[],"tags":[{"name":"Daily juice","slug":"Daily-juice","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/Daily-juice/"},{"name":"Dom","slug":"Dom","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/Dom/"}]},{"title":"Redux middleware","slug":"2.29","date":"2020-02-29T10:23:43.000Z","updated":"2020-03-04T14:15:28.568Z","comments":true,"path":"2020/02/29/2.29/","link":"","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/2020/02/29/2.29/","excerpt":"","text":"redux 中间件1.React 里 this 的指向问题谁调用的 this 就指向谁。eg:constructor 函数里的 this.state、生命周期函数等，这些函数都是由 react 实例来调用的。es6 箭头函数指向父层。eg：一个 onclick 函数；onclick={this.clickFunction} 这里的 this 是 undefined 的，所以在 clickFunction 里的 this 也是 undefined；有两种方法可以解决，第一种是将 clickFunction 变成箭头函数，箭头函数的 this 是指向父级作用域的，也就是 react 实例；第二种是使用 bind 改变 this 的指向。 2.redux 小点Redux 里 reducers 里的参数 state 要设置为空[ ]；每个 reducer(不同的 function)处理 state 的一个“片段”；const rootReducers = combineReducers({reducer 的集合})；connect 连接组件和 redux，返回一个 function开发时用来检查 state 对象是否被改变了 redux-immutable-state-invariant 插件；mapStateToProps 实现了让组件获取自己需要的 data，避免了全部渲染；如果没有加 mapdispatchtoprops, 组件实例会自动的把 dispatch 作为 props，允许我们 dispatch action，但需要添加类型检测， 1234import PropTypes from \"prop-types\";CoursesPage.propTypes = &#123; dispatch: PropTypes.func.isRequired&#125;; 3.渲染页面的流程 4.Js扩展运算符[…state,{object}] 合并 state 对象与 object 对象，如有重叠，将重叠的属性更新；exportexport default 对应着直接 import，不需要大括号，可以更改名字 ;export 需要{ }；","categories":[],"tags":[{"name":"Daily juice","slug":"Daily-juice","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/Daily-juice/"},{"name":"redux","slug":"redux","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/redux/"},{"name":"javascript","slug":"javascript","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/javascript/"},{"name":"react","slug":"react","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"}]},{"title":"Redux&JS","slug":"2.28","date":"2020-02-28T00:24:28.000Z","updated":"2020-03-04T14:26:22.380Z","comments":true,"path":"2020/02/28/2.28/","link":"","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/2020/02/28/2.28/","excerpt":"","text":"Redux1.React-Redux 将 react 组件绑定到 reduxhow?provider 组件将 app 连接到 redux storeconnect 组件将 react 组件连接到 redux store 2.mapStateToProps去定义 store 里哪一部分 state 你想作为 props 传入；（确定可利用的 state）定义此函数时，组件会 subscribe redux store 的更新，每当 store 更新时，此函数会被调用；mapDispatchToProps去定义哪一 action 你想作为 props 传入给组件； Js把一个 object 和 function 相连，在 function 里的 this 代指这个 object，更改 this 的指向。1.bindbind 会返回一个函数，但不会执行这个函数。var newFunc = functionName.bind(object)newFunc(argumentsOfFunction) 2.callfunctionName.call(object,argumentsOfFunction) 3.applyfunctionName.apply(object,arrayTypeArguments) 4.箭头函数与普通函数 this 指向this 永远指向的是最后调用它的对象new 关键字可以改变 this 的指向如果返回值是一个对象，那么 this 指向的就是那个返回的对象，如果返回值不是一个对象那么 this 还是指向函数的实例。普通函数 this 指向取决于函数调用的位置; 箭头函数 this 指向取决于函数定义的位置https://www.cnblogs.com/pssp/p/5216085.htmlhttps://zhuanlan.zhihu.com/p/47132493","categories":[],"tags":[{"name":"Daily juice","slug":"Daily-juice","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/Daily-juice/"},{"name":"redux","slug":"redux","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/redux/"},{"name":"javascript","slug":"javascript","permalink":"https://github.com/kyrie96521/kyrie96521.github.io/tags/javascript/"}]}]}