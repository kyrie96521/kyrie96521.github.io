<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kyle&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/kyrie96521/kyrie96521.github.io/"/>
  <updated>2020-05-10T13:20:47.221Z</updated>
  <id>https://github.com/kyrie96521/kyrie96521.github.io/</id>
  
  <author>
    <name>Kyle Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react lifecycle</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/23/4.23/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/23/4.23/</id>
    <published>2020-04-22T15:23:48.000Z</published>
    <updated>2020-05-10T13:20:47.221Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，这个世界上的所有事物都遵循一个周期（例如人类或树木）。我们出生，成长，然后死亡。几乎所有事物都遵循其生命周期，React 组件也是如此。组件被创建（mount 安装在 DOM 上），通过更新而增长，然后消失（在 DOM 上卸载 unmount）。这称为组件生命周期。</p><ol><li><p>初始化 initialize<br>在这个阶段，组件将通过 setting state 和 prop 来开始。这通常是在 constructor method 构造方法中完成的。</p></li><li><p>安装 mounting<br>mounting 是我们的 React 组件在 DOM 上挂载的阶段（即创建并插入到 DOM 中）。初始化阶段完成后，此阶段开始。在此阶段，我们的组件将首次呈现。此阶段可用的方法是：</p></li></ol><p>componentWillMount（）在组件安装在 DOM 上或调用 render 方法之前，将调用此方法。使用此方法后，将安装组件。注意：请勿在此方法中使用 this.setstate 进行 API 调用或任何数据更改，因为它是在 render 方法之前调用的。因此，由于 DOM 尚未挂载，因此无法对其进行任何处理（即使用 API??响应更新数据）。因此，我们无法使用 API??响应来更新状态。</p><p>componentDidMount（）在组件安装到 DOM 后，将调用此方法。<br>与 componentWillMount 一样，它在生命周期中被调用一次。在执行此方法之前，将调用 render 方法（即，我们可以访问 DOM）。我们可以进行 API 调用，并使用 API??响应更新状态。</p><ol start="3"><li>更新 updating<br>这是我们组件通过的第三阶段。在已创建组件的安装阶段之后，进入了更新阶段。这是组件状态改变的地方，因此，进行了重新渲染。在此阶段，组件的数据（state 和 prop）会根据用户事件（例如单击，键入等）进行更新。这导致组件的重新渲染。此阶段可用的方法是：</li></ol><p>shouldComponentUpdate（）此方法确定是否应更新组件。<br>默认情况下，它返回 true。但是在某些时候，如果您想在某种条件下重新渲染组件，则应该使用 componentComponentUpdate 方法。例如，假设您只想在 prop 发生更改时重新渲染组件，然后利用此方法的强大功能。它接收诸如 nextProps 和 nextState 之类的参数，这些参数可以帮助我们通过与当前 prop 值进行比较来决定是否重新渲染。</p><p>componentWillUpdate（）重新渲染组件之前调用它。在“ shouldComponentUpdate”方法之后调用一次。如果要在重新渲染组件之前以及在更新状态和属性之后执行一些计算，那么这是执行此操作的最佳位置。就像“ shouldComponentUpdate”方法一样，它也接收诸如 nextProps 和 nextState 之类的参数。</p><p>ComponentDidUpdate（）在重新渲染组件之后立即调用此方法。在新的（更新的）组件在 DOM 上更新后，将执行“ componentDidUpdate”方法。此方法接收诸如 prevProps 和 prevState 之类的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifeCycle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    date : <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    clickedStatus: <span class="literal">false</span>,</span><br><span class="line">    list:[]</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">componentWillMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Component will mount!)</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Component did mount!)</span><br><span class="line">    <span class="keyword">this</span>.getList();</span><br><span class="line">&#125;</span><br><span class="line">getList=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/*** method to make api call***/</span></span><br><span class="line">    fetch(https:<span class="comment">//api.mydomain.com)</span></span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; <span class="attr">list</span>:data &#125;));</span><br><span class="line">&#125;</span><br><span class="line">shouldComponentUpdate(nextProps, nextState)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.list!==nextState.list</span><br><span class="line">&#125;</span><br><span class="line">componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Component will update!);</span><br><span class="line">&#125;</span><br><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Component did update!)</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;h3&gt;Hello Mounting Lifecycle Methods!&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>卸载<br>这是组件生命周期的最后一个阶段。顾名思义，该阶段将组件从 DOM 卸载。此阶段可用的方法是：<br>componentWillUnmount（）在卸载组件之前会调用此方法。在从 DOM 中删除组件之前，执行“ componentWillUnMount”。此方法表示组件生命周期的结束。</p></li><li><p><img src="/images/reactlife.jpg" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;众所周知，这个世界上的所有事物都遵循一个周期（例如人类或树木）。我们出生，成长，然后死亡。几乎所有事物都遵循其生命周期，React 组件也是如此。组件被创建（mount 安装在 DOM 上），通过更新而增长，然后消失（在 DOM 上卸载 unmount）。这称为组件生命周期
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>sass</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/18/4.18/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/18/4.18/</id>
    <published>2020-04-17T15:23:48.000Z</published>
    <updated>2020-05-10T12:54:10.649Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>CSS 预处理器：用一种专门的编程语言，进行网页样式设计，然后再编译成正常的 CSS 文件</p></li><li><p>嵌套<br>在嵌套的代码块内，可以使用&amp;引用父元素。比如 a:hover 伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   　　 <span class="selector-tag">a</span> &#123;</span><br><span class="line">   　　　　&amp;:hover &#123; color: #ffb3ff; &#125;</span><br><span class="line">   　 &#125;</span><br></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   　　<span class="selector-class">.class1</span> &#123;</span><br><span class="line">   　　　　 <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　　<span class="selector-class">.class2</span> &#123;</span><br><span class="line">   　　　　@extend .class1;</span><br><span class="line">   　　　　 <span class="selector-tag">font-size</span><span class="selector-pseudo">:120</span>%;</span><br><span class="line">   　　&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mixin 可以重用的代码块<br>mixin 可以指定参数和缺省值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="keyword">@mixin</span> left($<span class="attribute">value:</span> <span class="number">10px</span>) &#123;</span><br><span class="line">　<span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">　margin-right: $value;</span><br><span class="line">　　&#125;</span><br><span class="line">使用的时候，根据需要加入参数：</span><br><span class="line">　　 <span class="selector-tag">div</span> &#123;</span><br><span class="line">　　　　@include left(20px);</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></li><li><p>条件、循环语句<br><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/06/sass.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;CSS 预处理器：用一种专门的编程语言，进行网页样式设计，然后再编译成正常的 CSS 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;嵌套&lt;br&gt;在嵌套的代码块内，可以使用&amp;amp;引用父元素。比如 a:hover 伪类&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
    
      <category term="sass" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>weather projrct</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/17/4.17/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/17/4.17/</id>
    <published>2020-04-16T15:23:48.000Z</published>
    <updated>2020-05-10T12:57:27.826Z</updated>
    
    <content type="html"><![CDATA[<ol><li>使用 heroku 更新内容</li></ol><ul><li>git status 看改变</li><li>git add</li><li>git commit -m</li><li>git pull</li><li>git push push 到远端</li><li>heroku login</li><li>git push heroku master 重新部署</li></ul><ol start="2"><li><p>weather-project 项目结构<br><a href="https://github.com/kyrie96521/weather-website">github repo</a><br>技术栈 node，hbs 视图</p></li><li><p>主要项目流程<br>当用户输入地点时，监听 submit 事件并传入回调，在 js 文件夹里的 app.js 会 fetch 用户输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="regexp">/weather?address= + location).then(response =&gt; &#123;&#125;)</span></span><br></pre></td></tr></table></figure><p>在根目录的之后 app.get(/weather, (req, res) =&gt; {})响应，根据地点来调用 forecast.js 和 geocode.js, 并通过 res.send({})（服务器端返回数据到客户）返回一个 json 格式的数据给 app.js。<br>之后 then 用 response 来获得数据并操作 dom 来渲染在页面上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="regexp">/weather?address= + location).then(response =&gt; &#123;</span></span><br><span class="line"><span class="regexp">response.json().then(data =&gt; &#123;</span></span><br><span class="line"><span class="regexp">console.log(data);</span></span><br><span class="line"><span class="regexp">if (data.error) &#123;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/console.log(data.error);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/能够显示在 DOM 里</span></span><br><span class="line"><span class="regexp">messageOne.textContent = data.error;</span></span><br><span class="line"><span class="regexp">&#125;else &#123;</span></span><br><span class="line"><span class="regexp">messageOne.textContent = data.location;</span></span><br><span class="line"><span class="regexp">messageTwo.textContent = data.forcast;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></li><li><p>项目难点<br>fetch endpoint 等待搜索结果时间，then 里传入回调函数 response 异步获取资源<br>fetch(url).then(function(response===res.send)</p><p>等待 request api 时间过后，传入回调函数作为参数传进 forecast.js 来获取数据，注意异步。<br>项目流程逻辑以及回调函数。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;使用 heroku 更新内容&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;git status 看改变&lt;/li&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git commit -m&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;git push push 
      
    
    </summary>
    
    
    
      <category term="project" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/16/4.16/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/16/4.16/</id>
    <published>2020-04-15T15:23:48.000Z</published>
    <updated>2020-04-19T07:17:58.284Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>float 属性指定元素应如何浮动。<br>浮动元素之后的元素将在其周围流动<br>eg:比如<p>&lt;img ..float..&gt;</p></p><p>会在img周围流动</li><li><p>网页上的每个元素都是一个矩形框。CSS 中的 display 属性确定矩形框的行为。<br>display: none<br>none 是 CSS 1 就提出来的属性，将元素设置为 none 的时候既不会占据空间，也无法显示，相当于该元素不存在。<br>display: inline<br>元素会占据最小的空间。任何高度和宽度属性均无效。<br>目前有很多原生的元素都是 inline 的，span、a、label、input、 img、 strong 和 em 就是典型的行内元素元素。default 是 inline 的。<br>display: block<br>元素会独占一行，即使宽度有剩余也会独占一行。<br>display: inline-block<br>inline-block 既具有 block 的宽高特性又具有 inline 的同行元素特性。可以设置高度和宽度。</p></li><li><p>为什么会出现<a href="https://www.html.cn/archives/8629" target="_blank" rel="noopener">flex</a>以及解决了什么？<br>为了提供一个更有效地布局、对齐方式，并且能够使容器中的子元素大小未知或动态变化情况下仍然能够分配好子元素之间的空间。<br>Flex 布局的主要思想是使父容器能够调节子元素的宽度/高度（和排列顺序），从而能够最好地填充可用空间（主要是为了适应所有类型的显示设备和屏幕尺寸）。flex 布容器能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。<br>相比于常规布局（基于垂直的块（block）和基于水平的内联（inline）， 虽然传统布局适用于页面，但它们对于大型或复杂的应用程序布局来说缺乏灵活性（特别是在改变方向，调整大小，拉伸，收缩等方面），flex 布容器能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;float 属性指定元素应如何浮动。&lt;br&gt;浮动元素之后的元素将在其周围流动&lt;br&gt;eg:比如&lt;p&gt;&amp;lt;img ..float..&amp;gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;会在img周围流动
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网页上的每个元素都是一个矩形框。CSS 中的
      
    
    </summary>
    
    
    
      <category term="css float" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/css-float/"/>
    
      <category term="css flex" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/css-flex/"/>
    
  </entry>
  
  <entry>
    <title>react官方文档</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/14/4.14/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/14/4.14/</id>
    <published>2020-04-13T15:23:48.000Z</published>
    <updated>2020-04-19T07:12:54.101Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>事件监听函数后要加一个 function<br>onClick={() =&gt; alert(‘click’)<br>onClick={function() { alert(‘click’); }}</p></li><li><p>在类组件里，构造函数必须以 super(props) 开头。</p></li><li><p>状态提升<br>所有的 state 状态数据存储在父组件当中，之后父组件可以将这些数据通过 props 传递给各个子组件。遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，需要把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。状态数据就能够更方便地同步共享。</p></li></ol><p>子组件不再持有 state，因此每次它们被点击的时候，子组件就会从父组件中接收值，并且通知父组件。在 React 术语中，我们把目前的 子组件称做“受控组件”。在这种情况下，父组件完全控制了子组件。</p><p>例子：Board 为父组件，Square 为子组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">renderSquare(i) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"><span class="comment">//Board 把 whenClick=&#123;() =&gt; this.handleClick(i)&#125; 传递给了 Square，所以当 Square 中的事件处理函数触发时，其实就是触发的 Board 当中的 this.handleClick(i) 方法</span></span><br><span class="line">    &lt;Square</span><br><span class="line">    value=&#123;<span class="keyword">this</span>.state.squares[i]&#125;</span><br><span class="line">    whenClick=&#123;() =&gt; <span class="keyword">this</span>.handleClick(i)&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line"><span class="comment">//button 被点击时，React 会调用 Square 组件的 render() 方法中的 onClick 事件处理函数;事件处理函数触发了传入其中的 this.props.onClick() 方法</span></span><br><span class="line">            &lt;button</span><br><span class="line">            className=<span class="string">"square"</span></span><br><span class="line">            onClick=&#123;() =&gt; <span class="keyword">this</span>.props.whenClick()&#125; &gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.props.value&#125; &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>不可变性的优点？新数据替换旧数据，原变量值没改变<br>简化复杂的功能，撤销和恢复到之前的状态。<br>跟踪数据的改变，发现新的对象就可跟踪到改变。<br>确定在 React 中何时重新渲染，可以帮助我们在 React 中创建 pure components。</p></li><li><p>函数组件<br>函数接收 props 作为参数，然后返回需要渲染的元素。<br>写法简单，不用定义继承于 React.Component 的类，this.props 都替换成了 props。</p></li><li><p>实现“X” 和 “O” 轮流落子的效果</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares[i] = <span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>;</span><br><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">  xIsNext: <span class="literal">true</span>, <span class="comment">//加一个 flag 判断</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;事件监听函数后要加一个 function&lt;br&gt;onClick={() =&amp;gt; alert(‘click’)&lt;br&gt;onClick={function() { alert(‘click’); }}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在类组件里，构造函数
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>compare</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/12/4.12/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/12/4.12/</id>
    <published>2020-04-11T15:23:48.000Z</published>
    <updated>2020-04-19T07:09:51.877Z</updated>
    
    <content type="html"><![CDATA[<ol><li>mongodb 和 mysql 的对比<br><img src="/images/mysql.png" alt=""></li></ol><p>MySQL MongoDB<br>表 集合<br>行 文档<br>列 字段<br>joins 嵌入文档或者链接</p><ol start="2"><li>TDD 和 BDD<br>TDD 的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码<br>BDD 的原理是鼓励软件项目中的开发者、QA 和非技术人员或商业参与者之间的协作,行为驱动是从用户的需求出发，强调系统行为</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;mongodb 和 mysql 的对比&lt;br&gt;&lt;img src=&quot;/images/mysql.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MySQL MongoDB&lt;br&gt;表 集合&lt;br&gt;行 文档&lt;br&gt;列 字段&lt;br&gt;joins 嵌入文档或者链接&lt;/
      
    
    </summary>
    
    
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
      <category term="jsx" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/jsx/"/>
    
      <category term="tdd" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/tdd/"/>
    
  </entry>
  
  <entry>
    <title>express路由</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/06/4.10/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/06/4.10/</id>
    <published>2020-04-05T15:23:48.000Z</published>
    <updated>2020-04-19T07:02:33.289Z</updated>
    
    <content type="html"><![CDATA[<ol><li>JSX 中使用三元运算符<br>{}大括号来在 JSX 中显示 JS 变量</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;this.props.someVar ? "World" : "Kitty"&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对象方法，”this”</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line"></span><br><span class="line">  sayHi() &#123;</span><br><span class="line">    <span class="comment">// "this" 指的是“当前的对象”; 可用 "user" 替代 "this"</span></span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">user.sayHi();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是 alert(user.name)，并且将 user 复制给另一个变量，例如 admin = user，并赋另外的值给 user，那么它将访问到错误的对象。</span></span><br><span class="line"><span class="keyword">let</span> admin = user;</span><br><span class="line">user = <span class="literal">null</span>; <span class="comment">// 重写让其更明显</span></span><br><span class="line">admin.sayHi(); <span class="comment">// 噢哟！在 sayHi() 使用了旧的 name 属性！报错！</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>“this” 不受限制<br>this 可以用于任何函数，this 的值是在代码运行时计算出来的，它取决于代码上下文。 在没有对象的情况下调用：this == undefined 。</p></li><li><p>内部：引用类型<br>obj.method() 语句中有两个操作符。<br>首先，点符号 ‘.’ 取得这个 obj.method 属性。其后的括号 () 调用它。<br>如果把这些操作拆分开，那么 this 肯定会丢失：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  hi() &#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将赋值与方法调用拆分为两行</span></span><br><span class="line"><span class="keyword">let</span> hi = user.hi;</span><br><span class="line">hi(); <span class="comment">// 错误，因为 this 未定义</span></span><br></pre></td></tr></table></figure><p>这里 hi = user.hi 把函数赋值给变量，其后的最后一行代码是完全独立的，所以它没有 this。<br>为了让 user.hi() 有效，JavaScript 用了一个技巧 —— 这个 ‘.’ 点符号返回的不是一个函数，而是一种特殊的 引用类型 的值。<br>引用类型是一种“规范中有的类型”。我们不能明确地指定它，但它被用在编程语言的内部。<br>引用类型的值是三部分的结合 (base, name, strict)，如下：<br>base 是对象。<br>name 是属性名。<br>在严格模式 use strict 下，strict 为真。<br>属性访问 user.hi 的结果不是函数，而是引用类型。在严格模式下的 user.hi 是：<br>// 引用类型值<br>(user, “hi”, true)<br>括号 () 调用引用类型时，将接收关于该对象及其方法的所有信息，并且可以设定正确的 this 值（这里等于 user）。<br>引用类型是一种特殊的“中间”内部类型，用于将信息从点符号 . 传递到调用括号 ()。<br>像赋值 hi = user.hi 等其他的操作，将引用类型作为一个整体丢弃，只获取 user.hi（一个函数）的值进行传递。因此，任何进一步的操作都会“失去” this。</p><ol start="5"><li>箭头函数没有自己的 “this”<br><a href="https://zh.javascript.info/arrow-functions#jian-tou-han-shu-mei-you-this" target="_blank" rel="noopener">箭头函数</a>没有 this。如果访问 this，则会从外部获取。</li></ol><p>6) 我的理解是：this 的传递需要对象+.+方法并且调用（）才能传递，否则会丢失。而且 this 是调用时给值，指向调用它的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;JSX 中使用三元运算符&lt;br&gt;{}大括号来在 JSX 中显示 JS 变量&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
      <category term="jsx" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/jsx/"/>
    
  </entry>
  
  <entry>
    <title>express路由</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/06/4.6/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/06/4.6/</id>
    <published>2020-04-05T15:23:48.000Z</published>
    <updated>2020-04-06T05:14:57.058Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>路由<br>路由表示应用程序端点 (URI) 的定义以及端点响应客户机请求的方式。</p></li><li><p>路由方法<br>路由方法派生自 HTTP 方法之一，附加到 express 类的实例</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST method route</span></span><br><span class="line">app.post(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">"POST request to the homepage"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有一种特殊路由方法：app.all()，它并非派生自 HTTP 方法。该方法用于在所有请求方法的路径中装入中间件函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">"/secret"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Accessing the secret section ..."</span>);</span><br><span class="line">  next(); <span class="comment">// pass control to the next handler</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>路由路径<br>路由路径与请求方法相结合，用于定义可以在其中提出请求的端点。路由路径可以是字符串、字符串模式或正则表达式。<br>此路由路径将匹配 /abe 和 /abcde。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/ab(cd)?e"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">"ab(cd)?e"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>路由处理程序<br>可以提供多个回调函数，以类似于中间件的行为方式来处理请求，这些回调函数可能调用 next(“route”) 来绕过剩余的路由回，路由处理程序的形式可以是一个函数、一组函数或者两者的结合。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cb0 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"CB0"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"CB1"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.get(</span><br><span class="line">  <span class="string">"/example/d"</span>,</span><br><span class="line">  [cb0, cb1],</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"the response will be sent by the next function ..."</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">"Hello from D!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>5.app.route()<br>使用 app.route() 为路由路径创建可链接的路由处理程序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">  .route(<span class="string">"/book"</span>)</span><br><span class="line">  .get(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">"Get a random book"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .post(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">"Add a book"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .put(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">"Update the book"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>6.express.Router<br>使用 express.Router 类来创建可安装的模块化路由处理程序。Router 实例是完整的中间件和路由系统；因此，常常将其称为“微型应用程序”。<br>以下示例将路由器创建为模块，在其中装入中间件，定义一些路由，然后安装在主应用程序的路径中。<br>在应用程序目录中创建名为 birds.js 的路由器文件，其中包含以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// middleware that is specific to this router</span></span><br><span class="line">router.use(<span class="function"><span class="keyword">function</span> <span class="title">timeLog</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Time: "</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// define the home page route</span></span><br><span class="line">router.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">"Birds home page"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// define the about route</span></span><br><span class="line">router.get(<span class="string">"/about"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">"About birds"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"><span class="comment">//接着，在应用程序中装入路由器模块：</span></span><br><span class="line"><span class="keyword">var</span> birds = <span class="built_in">require</span>(<span class="string">"./birds"</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/birds"</span>, birds);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;路由&lt;br&gt;路由表示应用程序端点 (URI) 的定义以及端点响应客户机请求的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;路由方法&lt;br&gt;路由方法派生自 HTTP 方法之一，附加到 express 类的实例&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure cl
      
    
    </summary>
    
    
    
      <category term="express" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>html&amp;js</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/05/4.5/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/05/4.5/</id>
    <published>2020-04-04T15:23:48.000Z</published>
    <updated>2020-04-06T05:07:11.150Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>setTimeout()、setInterval()的区别在于？<br>setTimeout()：当方法执行完成定时器就立即停止(但是定时器还在,只不过没用了);<br>setInterval()：当方法执行完成,定时器并没有停止,以后每隔[interval]这么长的时间都会重新的执行对应的方法[function],直到我们手动清除定时器为止;</p></li><li><p>什么 HTML 结构的语义化？<br>我的理解是让每个标签具有意义而不是无意义的标签 div 和 span；<br>为什么要语义化?<br>为了在没有 CSS 的情况下，页面也能呈现出很好地内容结构、代码结构；用户体验；有利于 SEO（搜索引擎优化）；便于团队开发和维护，语义化更具可读性，遵循 W3C 标准的团队都遵循这个标准，可以减少差异化。</p></li><li><p><a href="https://blog.csdn.net/major_zhang/article/details/79154287" target="_blank" rel="noopener">Promise 和 async-await 理解</a></p></li><li><p>JSX 最终会被 babel 编译为合法的 JS 语句给 React.createElement()函数调用（编译器在遇到{时采用 JS 语法进行解析，遇到&lt;就采用 HTML 规则进行解析）</p></li><li><p>label 标签</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt; 标签的 <span class="keyword">for</span> 属性应当与相关元素（input）的 id 属性相同。</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"jog"</span>&gt;慢跑&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="checkbox" name="jog" id="jog" /</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;setTimeout()、setInterval()的区别在于？&lt;br&gt;setTimeout()：当方法执行完成定时器就立即停止(但是定时器还在,只不过没用了);&lt;br&gt;setInterval()：当方法执行完成,定时器并没有停止,以后每隔[interva
      
    
    </summary>
    
    
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
      <category term="promise" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/promise/"/>
    
      <category term="sql" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/sql/"/>
    
      <category term="js" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/js/"/>
    
      <category term="html" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/html/"/>
    
      <category term="async" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>react this keyword</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/04/4.4/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/04/4.4/</id>
    <published>2020-04-03T14:23:48.000Z</published>
    <updated>2020-04-06T05:02:40.690Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>SQL 中 join 操作后面的 on 与 where 的区别<br>得到 on 条件是在 left join 之前先进行条件筛选，而后才对两个表格 join 操作，on 比 where 起作用更早，先根据 on 条件进行多表的连接操作，生成一个临时表再通过 where 来筛选</p></li><li><p>react 什么时候 render？<br>如果父组件重新渲染，则会发生重新渲染（可能包括新道具）<br>如果调用 this.setState（），将安排重新渲染。</p></li><li><p>function 的三种类型<br>构造函数：是用于使用 new 关键字创建具有相同原型的新对象的函数</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"amitai"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newPerson = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(newPerson.name); <span class="comment">// ‘amitai’this === newPerson</span></span><br><span class="line"><span class="comment">//我们使用它来设置 Person 的实例。调用构造函数时，this.name 的值为“ amitai”。并且对象 newPerson 具有值为 amitai 的属性名称。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数：如果函数不是对象的属性，则它是“普通函数”。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// undefined in “strict mode” or the global variable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：方法是一个定义为对象属性的函数。</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">person.firstName = <span class="string">"Amitai"</span>;</span><br><span class="line">person.lastName = <span class="string">"Barnea"</span>; <span class="comment">// 在方法里，this 用于引用对象的其他属性</span></span><br><span class="line"><span class="built_in">console</span>.log(person.fullName()); <span class="comment">// ‘Amitai Barnea’</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象方法和内嵌函数的 this 指向</span></span><br><span class="line"><span class="comment">//与变量不同，this 关键字没有作用域，并且嵌套函数不继承其调用者的 this 值,会被当做为普通函数指向 window/global。</span></span><br><span class="line"><span class="comment">//如果将嵌套函数作为方法调用，则其 this 值为在其上调用的对象.</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//person</span></span><br><span class="line">    <span class="keyword">var</span> calcFullName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window/global</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//把返回值换成 this.firstName + " " + this.lastName 会正常打印</span></span><br><span class="line">    <span class="keyword">return</span> calcFullName();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">person.firstName = <span class="string">"Amitai"</span>;</span><br><span class="line">person.lastName = <span class="string">"Barnea"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName()); <span class="comment">// Undefined!!!</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>react 怎么操作 dom？<br>大部分情况下你不需要去操作 DOM 元素，你只需要通过设置组件的状态值（setState），react 会通过状态值去渲染组 UI。但是可能在某些情况下你确实需要直接操作 DOM。<br>react 是从 jsx 到虚拟 dom 再从虚拟 dom 生成 dom 的，所以需要在页面生成 DOM 后才能去操作 DOM 节点的，那么很容易让我们相到 react 的几个生命周期，componentDidMount（）就是在组件挂载之后调用的一个生命周期，这时已经生成了 DOM 节点，所以，可以在这个生命周期里 操作 DOM！</p></li><li><p>为什么在 componentWillReceiveProps 在中调用 this.setState() 将不会引起第二次渲染？如果不重新渲染，那么获取到的新数据怎么更新到视图上去？</p></li></ol><p>props 有两种调用方式，第一，直接使用<br>这种方式，父组件改变 props 后，子组件重新渲染，由于直接使用的 props，所以我们不需要做什么就可以正常显示最新的 props</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二、转换成自己的 state<br>由于我们使用的是 state，所以每当父组件每次重新传递 props 时，我们需要重新处理下，将 props 转换成自己的 state，这里就用到了 componentWillReceiveProps。为什么不会二次渲染是这样的：每次子组件接收到新的 props，都会重新渲染一次，除非你做了处理来阻止（比如使用：shouldComponentUpdate），但是你可以在这次渲染前，根据新的 props 更新 state，更新 state 也会触发一次重新渲染，但 react 不会这么傻，所以只会渲染一次，这对应用的性能是有利的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      someThings: props.someThings,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">someThings</span>: nextProps.someThings &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;SQL 中 join 操作后面的 on 与 where 的区别&lt;br&gt;得到 on 条件是在 left join 之前先进行条件筛选，而后才对两个表格 join 操作，on 比 where 起作用更早，先根据 on 条件进行多表的连接操作，生成一个临时表再通
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"/>
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
      <category term="dom" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/dom/"/>
    
      <category term="lifecycle" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/lifecycle/"/>
    
      <category term="sql" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/sql/"/>
    
      <category term="js" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>mongodb</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/02/4.2/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/02/4.2/</id>
    <published>2020-04-01T14:23:48.000Z</published>
    <updated>2020-04-06T08:23:10.350Z</updated>
    
    <content type="html"><![CDATA[<ol><li>mongoose.Schema<br>schema 就是数据库对象的集合，这个集合包含了各种对象如：表、视图、存储过程、索引等。在 Mongoose 中，一切都被 Schema 所驱动。<br>在下面程序中，我们定义了一个 UserSchema，这个 UserSchema 对应在 mongoDB 中是一个 UserSchema 集合。该集合有两个属性，一个是 name，类型为 string，另一个是 email，类型也是 string。<br>在 Mongoose 中，所有数据都由一个 Schema 开始创建。每一个 schema 都映射到一个 Mongodb 的集合(collection)，并定义了该集合(collection)中的文档(document)的形式。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  email: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    unique: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>理解中间件：<br>将具体业务和底层逻辑解耦的组件，解耦指的是各部分相互独立，也可以通过接口相匹配。<br>大致的效果是：需要利用服务的人（前端写业务的），不需要知道底层逻辑（提供服务的）的具体实现，只要拿着中间件结果来用就好了。<br>express 里的中间件指的在处理请求和发送响应之间的方法/功能/操作。</p></li><li><p>body-parser 中间件<br>body-parser 是一个 HTTP 请求体解析中间件，使用这个模块可以解析 JSON、Raw、文本、URL-encoded 格式的请求体，Express 框架中就是使用这个模块做为请求体解析中间件。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.json(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br></pre></td></tr></table></figure><p>返回一个仅解析 json 格式数据的中间件，并且让我们通过 req.body 得到 data</p><ol start="4"><li>express-validator 中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; check, validationResult &#125; = <span class="built_in">require</span>(<span class="string">"express-validator/check"</span>);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/huruji/blog/issues/21">check</a>，判断合法性等方法。</p><ol start="5"><li><p>HTTP<br>http headers 里的：<br>Content-Type 标头用于指示资源的媒体类型。媒体类型是与文件一起发送的字符串，指示文件的格式。例如，对于图像文件，其媒体类型将为 png 或 jpg 等.</p><p>状态码：<br>200 OK 请求成功。一般用于 GET 与 POST 请求<br>201 Created 已创建。成功请求并创建了新的资源<br>400 Bad Request 客户端请求的语法错误，服务器无法理解<br>403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求<br>404 Not Found 服务器无法根据客户端的请求找到资源（网页）<br>500 Internal Server Error 服务器内部错误，无法完成请求</p></li><li><p><a href="https://segmentfault.com/a/1190000016788484" target="_blank" rel="noopener">aysnc-await</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">json web token</a><br>互联网服务一般流程是下面这样:<br>1、用户向服务器发送用户名和密码。<br>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。<br>3、服务器向用户返回一个 session_id，写入用户的 Cookie。<br>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。<br>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。<br>JWT 的方案是服务器不保存 session 数据，所有数据都保存在客户端，每次请求都发回服务器。JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，每当用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。<br><img src="/images/jwt.jpg" alt=""></p></li><li><p>config.get() 使用 config 来管理配置文件</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.get(<span class="string">"jwtSecret"</span>); <span class="comment">//jwtSecret 在配置文件里。</span></span><br></pre></td></tr></table></figure><ol start="9"><li>在服务器里 entrypt password</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.genSalt(<span class="number">10</span>);</span><br><span class="line">user.password = <span class="keyword">await</span> bcrypt.hash(passwork, salt);</span><br></pre></td></tr></table></figure><ol start="10"><li>异步原理：<br>js 是单线程，意味着排队执行，如果计算量大，cpu 会忙不过来。设计者意识到主线程完全可以不管 io 阻塞，挂起处于等待中的任务，先运行排在后面的任务，等到 io 阻塞返回了结果，再把挂起的任务执行下去。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;mongoose.Schema&lt;br&gt;schema 就是数据库对象的集合，这个集合包含了各种对象如：表、视图、存储过程、索引等。在 Mongoose 中，一切都被 Schema 所驱动。&lt;br&gt;在下面程序中，我们定义了一个 UserSchema，这个 UserS
      
    
    </summary>
    
    
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
      <category term="mongodb" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/mongodb/"/>
    
      <category term="middleware" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/middleware/"/>
    
      <category term="http" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/http/"/>
    
      <category term="aysnc" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/aysnc/"/>
    
      <category term="异步" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="mongoose" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>CICD</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/02/4.3/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/02/4.3/</id>
    <published>2020-04-01T14:23:48.000Z</published>
    <updated>2020-04-10T10:48:20.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a><a href="https://blog.jjonline.cn/linux/238.html" target="_blank" rel="noopener">CICD</a></h3><p>CI 的英文名称是 Continuous Integration，中文翻译为：持续集成。<br>CI 中，开发人员将会频繁地向主干提交代码，这些新提交的代码在最终合并到主干前，需要经过编译和自动化测试流进行验证。</p><p>持续集成（CI）是在源代码变更后自动检测、拉取、构建和（在大多数情况下）进行单元测试的过程。持续集成的目标是快速确保开发人员新提交的变更是好的，并且适合在代码库中进一步使用。CI 的流程执行和理论实践让我们可以确定新代码和原有代码能否正确地集成在一起。</p><p>CD 可对应多个英文名称，持续交付 Continuous Delivery 和持续部署 Continuous Deployment 。<br>持续交付<br>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。<br>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中或发布给最终使用的用户。<br><img src="/images/ci.png" alt=""><br>持续部署<br>对于一个成熟的 CI/CD 管道（Pipeline）来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。<br>持续部署意味着所有的变更都会被自动部署到生产环境中。持续交付意味着所有的变更都可以被部署到生产环境中，但是出于业务考虑，可以选择不部署。如果要实施持续部署，必须先实施持续交付。<br>持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。<br>持续交付表示的是一种能力，而持续部署表示的则一种方式。持续部署是持续交付的最高阶段<br><img src="/images/cd.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CICD&quot;&gt;&lt;a href=&quot;#CICD&quot; class=&quot;headerlink&quot; title=&quot;CICD&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.jjonline.cn/linux/238.html&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
    
      <category term="CICD" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/CICD/"/>
    
  </entry>
  
  <entry>
    <title>this keyword of react</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/04/01/4.1/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/04/01/4.1/</id>
    <published>2020-03-31T14:23:48.000Z</published>
    <updated>2020-04-06T08:19:33.358Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>为什么用 react hooks？<br>允许创建每个组件为函数组件。<br>更简单的在组件中分享状态逻辑。</p></li><li><p>React Fragments<br>React 中常见模式是为一个组件返回多个元素。为了包裹多个元素你肯定写过很多的 div 和 span，进行不必要的嵌套，无形中增加了浏览器的渲染压力。Fragments 简写形式&lt;&gt;&lt;/&gt;。</p></li><li><p>this 指向</p></li></ol><p>普通函数 this 指向函数的调用对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="string">"XX"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">//这里f 的调用等同于window.f(); 所以f函数内部this指向的是window</span></span><br></pre></td></tr></table></figure><p>对象方法中调用 —- this 指向上级对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">user:<span class="string">"xxx"</span>,</span><br><span class="line">fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里要注意一点，就是在对象中可能有多层嵌套的对象，但是this指向的都是他调用地方的上级对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">user:<span class="string">"xxx"</span>,</span><br><span class="line">b: &#123;</span><br><span class="line">user: <span class="string">"bbb"</span>,</span><br><span class="line">fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">// bbb</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">obj.b.fn();</span><br><span class="line"><span class="comment">//如上，虽然是在obj里面this调用，但是因为是在obj.b这个对象中，所以this指向的是 obj.b</span></span><br><span class="line"></span><br><span class="line">注意不能只看上级对象，更关键的是调用对象</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">user:<span class="string">"xxx"</span>,</span><br><span class="line">b: &#123;</span><br><span class="line">user: <span class="string">"bbb"</span>,</span><br><span class="line">fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = obj.b.fn;</span><br><span class="line">f()</span><br><span class="line"><span class="comment">//如上，this其实是在f执行的时候调用的，这时候，f的this的调用对象是window,那么就可以理解window.user为undefined</span></span><br></pre></td></tr></table></figure><p>构造函数 — this 指向 new 出来的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = <span class="string">"xxx;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var a = new Fn();</span></span><br><span class="line"><span class="string">    console.log(a.user); //xxx</span></span><br><span class="line"><span class="string">//new 的过程其实也是初始化了一个新的对象，然后用新的对象调用原先的函数 Fn.call(a) 这个情况跟下面这种情况类似了。</span></span><br></pre></td></tr></table></figure><p>apply, call, bind 通过改变函数的调用对象而改变 this 的指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"id:"</span>, <span class="keyword">this</span>.id); <span class="comment">//42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; <span class="attr">id</span>: <span class="number">42</span> &#125;); <span class="comment">//foo函数的调用对象变成了 &#123;id: 42&#125;,所以this指向发生了变化</span></span><br></pre></td></tr></table></figure><p>箭头函数 this 的指向 —- this 指向其定义时候的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"peter"</span>;</span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  name: <span class="string">"tony"</span>,</span><br><span class="line">  c: (<span class="keyword">this</span>.name = <span class="string">"lily"</span>),</span><br><span class="line">  b: <span class="built_in">console</span>.log(<span class="string">"1"</span>, name), <span class="comment">//peter,函数里this指向global(node)/window ; 最先打印出</span></span><br><span class="line">  jiantou: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//若注解c: (this.name = "lily"),this === &#123;&#125;,指的定义处上下文;否则&#123;this.name = "lily"&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//lily</span></span><br><span class="line">  &#125;,</span><br><span class="line">  putong: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* obj a &#123;</span></span><br><span class="line"><span class="comment">        name: 'tony',</span></span><br><span class="line"><span class="comment">        b: undefined,</span></span><br><span class="line"><span class="comment">        jiantou: [Function: jiantou],</span></span><br><span class="line"><span class="comment">        putong: [Function: putong]</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//tony</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.jiantou();</span><br><span class="line">a.putong();</span><br><span class="line"><span class="keyword">typeof</span> a.b; <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>箭头函数的 this 在定义时所在的对象，其实质是因为箭头函数没有自己的 this,用的是外层的 this。<br>普通函数的 this 是看的是它执行时候的调用对象; 箭头函数的 this 与它的执行没有关系，在定义的时候就决定了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;为什么用 react hooks？&lt;br&gt;允许创建每个组件为函数组件。&lt;br&gt;更简单的在组件中分享状态逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Fragments&lt;br&gt;React 中常见模式是为一个组件返回多个元素。为了包裹多个元素你肯定写过
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"/>
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>React 的生命周期</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/03/30/3.30/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/03/30/3.30/</id>
    <published>2020-03-29T14:23:48.000Z</published>
    <updated>2020-04-06T05:05:52.329Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Virtual DOM 工作原理<br>Virtual DOM 是一个轻量级的 JavaScript 对象。它是一个节点树，将元素、它们的属性和内容作为对象及其属性，可以理解为树上的每个节点。 React 的渲染函数从 React 组件中创建一个节点树。然后它响应数据模型中的变化来更新该树，该变化是由用户或系统完成的各种动作引起的。<br>每当底层数据发生改变时，整个 UI 都将在 Virtual DOM 描述中重新渲染。<br>计算之前 DOM 表示与新表示的之间的差异。<br>完成计算后，将只用实际更改的内容更新 real DOM。</p></li><li><p><a href="https://juejin.im/post/5b077f04f265da0dc073caa6" target="_blank" rel="noopener">React 的生命周期方法有哪些</a><br>componentWillMount:在渲染之前执行，用于根组件中的 App 级配置。<br>componentDidMount：在第一次渲染之后执行，可以在这里做 AJAX 请求，DOM 的操作或状态更新以及设置事件监听器。<br>componentWillReceiveProps：在初始化 render 的时候不会执行，它会在组件接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染<br>shouldComponentUpdate：确定是否更新组件。默认情况下，它返回 true。如果确定在 state 或 props 更新后组件不需要在重新渲染，则可以返回 false，这是一个提高性能的方法。<br>componentWillUpdate：在 shouldComponentUpdate 返回 true 确定要更新组件之前执行。<br>componentDidUpdate：它主要用于更新 DOM 以响应 props 或 state 更改。<br>componentWillUnmount：它用于取消任何的网络请求，或删除与组件关联的所有事件监听器。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Virtual DOM 工作原理&lt;br&gt;Virtual DOM 是一个轻量级的 JavaScript 对象。它是一个节点树，将元素、它们的属性和内容作为对象及其属性，可以理解为树上的每个节点。 React 的渲染函数从 React 组件中创建一个节点树。然
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"/>
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
      <category term="virtual dom" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/virtual-dom/"/>
    
      <category term="lifecycle" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/lifecycle/"/>
    
  </entry>
  
  <entry>
    <title>this keyword of react</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/03/29/3.29/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/03/29/3.29/</id>
    <published>2020-03-28T14:23:48.000Z</published>
    <updated>2020-04-06T04:13:44.463Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>react 中 this 指向<br>发现还是对 this 指向掌握不明确，看完这个博客清晰多了。<br>React 是通过创建虚拟 DOM，然后将虚拟 DOM 生成真实的 DOM，最后插入到页面中，而 React 生命周期中 render 方法的作用就是将虚拟 DOM 渲染成真实 DOM。在 JSX 语法中: onClick={ function } onClick 这个属性本身只是一个”中间变量”。将函数赋值给 onClick 这个中间变量，后面不仅要进行 JSX 语法转化,将 JSX 组件转换成 Javascript 对象,还要再将 Javascript 对象转换成真实 DOM。<br>前提：JS 中的 this 是由函数调用者调用的时候决定的。把 onClick 作为中间变量,指向一个函数的时候,后面的一系列处理中，使用 onClick 这个中间变量所指向的函数，里面的 this 自然就丢失掉了，不是再指向对象实例了。</p></li><li><p>实例</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">  name: <span class="string">"jack"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">test.getName();</span><br><span class="line"><span class="comment">//使用node test.js执行上述代码可以正常输出jack。 之后，我们对代码进行调整：</span></span><br><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">  name: <span class="string">"jack"</span>,</span><br><span class="line">  getJack: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如果传递一个函数名给一个变量，之后通过函数名()的方式进行调用，在方法内部如果使用this则this的指向会丢失</span></span><br><span class="line"><span class="keyword">const</span> func = test.getJack;</span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们没有直接调用对象的方法，而是将方法声明给一个中间变量，之后利用中间变量()调用方法，此时 this 则失去指向，输出 undefined，如果使用 node 环境执行 js 文件则输出 node 相关信息，如嵌入到 html 中则 this 指向 window 对象。</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>React 事件绑定<br>React 中的 bind 同上方原理一致,在 JSX 中传递的事件不是一个字符串，而是一个函数（如:onClick={this.handleClick}），此时 onClick 即是中间变量，所以处理函数中的 this 指向会丢失。解决这个问题就是给调用函数时 bind(this)，从而使得无论事件处理函数如何传递，this 指向都是当前实例化对象。 当然，如果不想使用 bind(this)，我们可以在声明函数时使用箭头函数将函数内容返回给一个变量，并在调用时直接使用 this.变量名即可。<br><img src="/images/this.png" alt=""></p></li><li><p>React 没有自动的把 bind 集成到 render 方法中呢?<br>因为 render 多次调用每次都要 bind 会影响性能，所以官方建议 constructor 中手动 bind 达到性能优化。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;react 中 this 指向&lt;br&gt;发现还是对 this 指向掌握不明确，看完这个博客清晰多了。&lt;br&gt;React 是通过创建虚拟 DOM，然后将虚拟 DOM 生成真实的 DOM，最后插入到页面中，而 React 生命周期中 render 方法的作用就是
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"/>
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>react-router</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/03/28/3.28/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/03/28/3.28/</id>
    <published>2020-03-27T14:23:48.000Z</published>
    <updated>2020-04-06T04:04:40.200Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>前端路由与后端路由<br>后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。</p></li><li><p><a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener">MVC</a><br>MVC 是三个单词的首字母缩写，它们是 Model（模型）、View（视图）和 Controller（控制）。<br>这个模式认为，程序不论简单或复杂，从结构上看，都可以分成三层。<br>1）最上面的一层，是直接面向最终用户的视图层（View）。它是提供给用户的操作界面，是程序的外壳。<br>2）最底下的一层，是核心的数据层（Model），也就是程序需要操作的数据或信息。<br>3）中间的一层，就是控制层（Controller），它负责根据用户从视图层输入的指令，选取数据层中的数据，然后对其进行相应的操作，产生最终结果。<br>这三层是紧密联系在一起的，但又是互相独立的，每一层内部的变化不影响其他层。每一层都对外提供接口（Interface），供上面一层调用。这样一来，软件就可以实现模块化，修改外观或者变更数据都不用修改其他层，大大方便了维护和升级。</p></li><li><p>SPA Single Page Application<br>单页应用程序是一个 Web 应用程序，其中客户端 JavaScript 处理路由而不是后端。优点有：<br>SPA 非常易于部署到生产环境中。<br>SPA 快速且易于使用，因为您不必等待重新加载页面。<br>应用程序会动态加载状态。由于该应用程序使用较少的带宽，并且该应用程序的整体性能超过了典型的前端/后端应用程序的性能，因此可以改善用户体验。</p></li><li><p>复习 sql<br>GROUP BY–根据(by)一定的规则进行分组(Group)。 它的作用是通过一定的规则将一个数据集划分成若干个小的区域，然后针对若干个小区域进行数据处理。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer,<span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer <span class="comment">----查找每个客户的总金额</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="comment">--在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用。</span></span><br><span class="line"><span class="keyword">SELECT</span> Customer,<span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> Customer=<span class="string">"Bush"</span> <span class="keyword">OR</span> Customer=<span class="string">"Adams"</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(OrderPrice)&gt;<span class="number">1500</span><span class="comment">----查找客户 Bush 或 Adams 拥有超过 1500 的订单总金额</span></span><br></pre></td></tr></table></figure></li><li><p>react-router<br>路由器对象有两种类型。浏览器路由器哈希路由器如果我们要处理动态请求，请使用 BrowserRouter；如果要处理静态请求，请使用 HashRouter。</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App"</span>;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &#123;<span class="string">" "</span>&#125;</span><br><span class="line">    &lt;App /&gt;&#123;<span class="string">" "</span>&#125;</span><br><span class="line">  &lt;<span class="regexp">/BrowserRouter&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/three compoents:home,contract,about</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/app.js</span></span><br><span class="line"><span class="regexp">class App extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Router&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h2&gt;Welcome to React Router Tutorial&lt;/</span>h2&gt;</span><br><span class="line">          &lt;nav className=<span class="string">"navbar navbar-expand-lg navbar-light bg-light"</span>&gt;</span><br><span class="line">            &lt;ul className=<span class="string">"navbar-nav mr-auto"</span>&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;Link to=&#123;<span class="string">"/"</span>&#125; className=<span class="string">"nav-link"</span>&gt;</span><br><span class="line">                  Home</span><br><span class="line">                &lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;Link to=&#123;<span class="string">"/contact"</span>&#125; className=<span class="string">"nav-link"</span>&gt;</span><br><span class="line">                  Contact</span><br><span class="line">                &lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;Link to=&#123;<span class="string">"/about"</span>&#125; className=<span class="string">"nav-link"</span>&gt;</span><br><span class="line">                  About</span><br><span class="line">                &lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>li&gt;</span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>nav&gt;</span><br><span class="line">          &lt;hr /&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/contact"</span> component=&#123;Contact&#125; /&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Router 是 react 路由的外层盒子，里面的内容就是单页面应用的路由以及路由组件。Router 下面只能包含一个盒子标签，类似这里的 div。</p><p>Link 是点击切换到哪一组件的链接。Link 代表一个链接，在 html 界面中会解析成 a 标签。作为一个链接，必须有一个 to 属性，代表链接地址。这个链接地址是一个相对路径。</p><p>Route 代表路由有一个 path 和一个组件属性（也以 component、render 等等）。path 代表相对路径，component 代表组件。</p><p>Switch 只会渲染第一个路径，不用则会使每一个被匹配到的 Route 都会被渲染。只找到第一个被 location 匹配到的 route 就停止匹配。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;前端路由与后端路由&lt;br&gt;后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。&lt;/p&gt;
&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="react-router" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react-router/"/>
    
      <category term="sql" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/sql/"/>
    
      <category term="SPA" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/SPA/"/>
    
      <category term="MVC" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>express</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/03/24/3.24/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/03/24/3.24/</id>
    <published>2020-03-23T14:23:48.000Z</published>
    <updated>2020-04-07T00:45:40.201Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(express); <span class="keyword">const</span> app = express();</span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(listening on <span class="number">3000</span>) &#125;)</span><br></pre></td></tr></table></figure><p>Express 处理 GET 请求通过 get method:<br>app.get(path, callback)<br>path 是 domain 后面的内容，callback 是当路径匹配时 server 将要做什么；<br>app.get(/, function(req, res) { res.send(Hello World) })<br>用 respons 给浏览器写一个”Hello World”；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="regexp">/, (req, res) =&gt; &#123; res.sendFile(\_\_dirname + /i</span>ndex.html) &#125;)</span><br></pre></td></tr></table></figure><p>将 index.html 页面放回到浏览器中</p><p>仅当 POST 请求发送到服务器时，CREATE 操作才由浏览器执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">/quotes</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">placeholder</span>=<span class="string">name</span> <span class="attr">name</span>=<span class="string">name</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">placeholder</span>=<span class="string">quote</span> <span class="attr">name</span>=<span class="string">quote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>action 属性告诉浏览器在我们的 Express 应用中导航到的位置。在这种情况下，我们导航到/ quotes。method 属性告诉浏览器发送什么请求。在这种情况下，这是一个 POST 请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="regexp">/quotes, (req, res) =&gt; &#123; console.log(Hello!) &#125;)</span></span><br></pre></td></tr></table></figure><p>重新启动服务器并刷新浏览器。然后，在表单元素中输入一些内容。能够看到 Hello！在命令行中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser= <span class="built_in">require</span>(body-parser)app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;))</span><br></pre></td></tr></table></figure><p>Express 允许我们使用 use 方法向应用程序中添加诸如 body-parser 之类的中间件。在处理 Express 时，经常听到“中间件”一词。这些东西基本上是在我们的应用程序处理它们之前更改请求或响应对象的插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="regexp">/quotes, (req, res) =&gt; &#123; console.log(req.body) &#125;)</span></span><br></pre></td></tr></table></figure><p>body-parser 中的 urlencoded 方法告诉 body-parser 从<form>元素中提取数据并将其添加到请求对象的 body 属性中。</p></li><li><p>node<br>npm install nodemon –save-dev<br>–save-dev 标志会将 Nodemon 保存为您的 package.json 文件中的 devDependency。<br>{ // … scripts: { dev: nodemon server.js } // … }<br>现在可以运行 npm run dev 来触发 nodemon server.js。</p><p>npm install mongodb –save<br>collection 是一个存东西的命名空间.</p></li><li><p>9321ass<br>9321 这次的 assignment 主要用 flask 框架和数据库交互来写 api，数据是从网页的 json 格式数据读到数据库里，然后将数据渲染在 swagger-ui 页面上，有 7 个不同的功能（增删改查）。主要运用了 Flask-RESTful 和 sqlite 等包。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;express&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
    
    
      <category term="express" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/express/"/>
    
      <category term="unsw" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/unsw/"/>
    
  </entry>
  
  <entry>
    <title>Scss</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/03/23/3.23/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/03/23/3.23/</id>
    <published>2020-03-22T14:23:48.000Z</published>
    <updated>2020-04-06T02:10:19.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scss"><a href="#scss" class="headerlink" title="scss"></a><a href="https://zhuanlan.zhihu.com/p/35478792" target="_blank" rel="noopener">scss</a></h3><ol><li>变量用来存储需要在 CSS 中复用的信息，例如颜色和字体。</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>是过度的使用嵌套会让产生的 CSS 难以维护，因此是一种不好的实践</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>SASS 能够将代码分割为多个片段，并以 underscore 风格的下划线作为其命名前缀,SASS 会通过这些下划线来辨别哪些文件是 SASS 片段，并且不让片段内容直接生成为 CSS 文件，从而只是在使用@import 指令的位置被导入.</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _reset.scss</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// base.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"reset"</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>混合（Mixin）用来分组那些需要在页面中复用的 CSS 声明，开发人员可以通过向 Mixin 传递变量参数来让代码更加灵活</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border-radius(<span class="variable">$radius</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">  -ms-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> border-radius(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码建立了一个名为 border-radius 的 Mixin，并传递了一个变量$radius 作为参数，然后在后续代码中通过@include border-radius(10px)使用该 Mixin，最终编译的结果如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>继承是 SASS 中非常重要的一个特性，可以通过@extend 指令在选择器之间复用 CSS 属性，并且不会产生冗余的代码</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码不会被输出到最终生成的CSS文件，因为它没有被任何代码所继承。</span></span><br><span class="line">%other-styles &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码会正常输出到生成的CSS文件，因为它被其接下来的代码所继承。</span></span><br><span class="line">%message-common &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-common;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-common;</span><br><span class="line">  <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-common;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-common;</span><br><span class="line">  <span class="attribute">border-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>操作符<br>SASS 提供了标准的算术运算符，例如+、-、*、/、%。</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role="complementary"]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>Scss 允许 CSS 规则嵌套使用，父子规则将会呈现包含选择器的关系,可以避免重复的使用父级选择器，从而达到简化 CSS 代码结构的目的.<br>Scss 使用$关键字在 CSS 规则中引用父级选择器，例如在嵌套使用伪类选择器的场景下：</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===== SCSS =====*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>Scss 当中只需要编写命名空间一次，后续嵌套的子属性都将会位于该命名空间之下</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;scss&quot;&gt;&lt;a href=&quot;#scss&quot; class=&quot;headerlink&quot; title=&quot;scss&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35478792&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
    
      <category term="Scss" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/Scss/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/03/22/3.22/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/03/22/3.22/</id>
    <published>2020-03-21T14:23:48.000Z</published>
    <updated>2020-04-10T10:48:20.571Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>除了构造函数和生命周期钩子函数里会自动绑定 this 为当前组件外，其他的都不会自动绑定 <a href="https://sunburst.wang/posts/2019/07/05/react-docs-notes.html#_1-%E5%85%83%E7%B4%A0-%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">this 的指向</a>为当前组件。<br>如果你在 JSX 里忘记将 this 绑定到 this.handleClick 并把它传入了 onClick，那么当你调用这个函数的时候 this 的值为 undefined。</p></li><li><p>React 中，你可以创建不同的组件来封装各种你需要的行为。然后，依据应用的不同状态，你可以只渲染对应状态下的部分内容。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>欢迎&#123;isQbVip &amp;&amp; <span class="tag">&lt;<span class="name">a</span>&gt;</span>请尽快升级为正式 Vip!<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果条件是 true，&amp;&amp; 右侧的元素就会被渲染，如果是 false，React 会忽略并跳过它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;除了构造函数和生命周期钩子函数里会自动绑定 this 为当前组件外，其他的都不会自动绑定 &lt;a href=&quot;https://sunburst.wang/posts/2019/07/05/react-docs-notes.html#_1-%E5%85%83%
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/react/"/>
    
      <category term="this" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>social network project</title>
    <link href="https://github.com/kyrie96521/kyrie96521.github.io/2020/03/21/3.21/"/>
    <id>https://github.com/kyrie96521/kyrie96521.github.io/2020/03/21/3.21/</id>
    <published>2020-03-20T14:23:48.000Z</published>
    <updated>2020-04-10T10:48:20.570Z</updated>
    
    <content type="html"><![CDATA[<p>今天做的 project 内容是 express 对 server 的配置包括路由以及连接 MongoDB，让我对后端的结构有一个初步的理解。主要是以下几个点：</p><ol><li>设置 PORT 环境变量并且告诉服务器去哪监听；若没有，本地在 5000 端口 。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>app.use(/api/users, require(./routers/api/users));<br>路由规则是 app.use(path,router)定义的，router 代表一个由 express.Router()创建的对象，在路由对象中可定义多个路由规则。每次将请求发送到服务器时，都会调用各个 app.use（middleware）</p></li><li><p><a href="https://blog.csdn.net/wthfeng/article/details/53366169" target="_blank" rel="noopener">app.use 和 app.get 的区别</a><br>app.use(path,callback)中的 callback 既可以是 router 对象又可以是函数<br>app.get(path,callback)中的 callback 只能是函数<br>给 app.get(app.post、app.put 同理)赋个路由对象是不行的</p></li><li><p>获取 mongoURI<br>cluster 连接自己的 app，设置安全地址等</p></li><li><p>mongodb 连接配置<br>每次用 async 函数时，都要用 try-catch 函数来判断失败情况</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天做的 project 内容是 express 对 server 的配置包括路由以及连接 MongoDB，让我对后端的结构有一个初步的理解。主要是以下几个点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 PORT 环境变量并且告诉服务器去哪监听；若没有，本地在 5000 端口 。&lt;/
      
    
    </summary>
    
    
    
      <category term="project" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/project/"/>
    
      <category term="express" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/express/"/>
    
      <category term="mongodb" scheme="https://github.com/kyrie96521/kyrie96521.github.io/tags/mongodb/"/>
    
  </entry>
  
</feed>
